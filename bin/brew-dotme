#!/bin/sh
# Enhanced Homebrew wrapper script
# Compatible with macOS and Linux Homebrew installations
# Handles pyenv conflicts and different Homebrew paths

# Function to find Homebrew installation
find_homebrew() {
    # Common Homebrew installation paths
    local brew_paths=(
        "/usr/local/bin/brew"      # Intel Mac, Linux
        "/opt/homebrew/bin/brew"   # Apple Silicon Mac
        "/home/linuxbrew/.linuxbrew/bin/brew"  # Linux
        "$HOME/.linuxbrew/bin/brew"            # User-installed Linux
    )
    
    for path in "${brew_paths[@]}"; do
        if [ -x "$path" ]; then
            echo "$path"
            return 0
        fi
    done
    
    # Fallback: try to find brew in PATH
    if command -v brew >/dev/null 2>&1; then
        command -v brew
        return 0
    fi
    
    return 1
}

# Function to clean PATH from pyenv shims
clean_path_from_pyenv() {
    local path="$1"
    local pyenv_root=""
    
    # Get pyenv root if pyenv is available
    if command -v pyenv >/dev/null 2>&1; then
        pyenv_root=$(pyenv root 2>/dev/null)
    fi
    
    # If pyenv root is found, remove it from PATH
    if [ -n "$pyenv_root" ]; then
        echo "${path//${pyenv_root}/shims:/}"
    else
        echo "$path"
    fi
}

# Main execution
main() {
    # Find Homebrew installation
    local brew_path
    if ! brew_path=$(find_homebrew); then
        echo "Error: Homebrew not found. Please install Homebrew first." >&2
        echo "Visit https://brew.sh for installation instructions." >&2
        exit 1
    fi
    
    # Clean PATH from pyenv interference
    local clean_path
    clean_path=$(clean_path_from_pyenv "$PATH")
    
    # Set Homebrew environment variables
    export HOMEBREW_NO_AUTO_UPDATE=1
    export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
    
    # Execute Homebrew with cleaned PATH
    exec env PATH="$clean_path" "$brew_path" "$@"
}

# Run main function
main "$@"
