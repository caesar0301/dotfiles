#!/bin/bash

# Decrypt .zshenv.local.enc file and set up local environment
#
# Usage: ./decrypt-zshenv-dotme [alias] [encrypted_file]
#   alias: GPG alias to use (default: "default")
#   encrypted_file: Path to encrypted file (default: auto-detect in script directory)

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Main script logic
main() {
  local alias_name="${1:-default}"
  local encrypted_file="${2:-}"
  local backup_dir="$HOME"
  local target_file="$HOME/.zshenv.local"
  local gpg_tool="gpg-dotme"

  # Show help if requested
  if [[ "$alias_name" == "help" || "$alias_name" == "-h" || "$alias_name" == "--help" ]]; then
    echo "Superman Utilities Script"
    echo ""
    echo "Usage: $0 [alias] [encrypted_file]"
    echo ""
    echo "Parameters:"
    echo "  alias: GPG alias to use (default: 'default')"
    echo "  encrypted_file: Path to encrypted file (default: auto-detect in script directory)"
    echo ""
    echo "Examples:"
    echo "  $0"
    echo "  $0 my-alias"
    echo "  $0 my-alias /path/to/file.enc"
    echo "  $0 help"
    exit 0
  fi

  # If no encrypted file specified, auto-detect in script directory
  if [ -z "$encrypted_file" ]; then
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    encrypted_file="$script_dir/.zshenv.local.enc"
  fi

  # Check if encrypted file exists
  if [ ! -f "$encrypted_file" ]; then
    print_error "Encrypted file '$encrypted_file' not found"
    exit 1
  fi

  # Check if gpg tool exists and is executable
  if ! command -v "$gpg_tool" &>/dev/null; then
    print_error "$gpg_tool not found in PATH"
    exit 1
  fi

  # Create backup of existing .zshenv.local if it exists
  if [ -f "$target_file" ]; then
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="$backup_dir/.zshenv.bak.$timestamp"
    print_info "Creating backup: $backup_file"
    cp "$target_file" "$backup_file"
  fi

  # Decrypt the file using gpg tool
  print_info "Decrypting $encrypted_file to $target_file using alias '$alias_name'..."
  if "$gpg_tool" dec "$alias_name" "$encrypted_file" >"$target_file"; then
    print_info "Successfully decrypted to $target_file"
    print_info "You can now source this file or add it to your shell configuration"
    exit 0
  else
    print_error "Failed to decrypt $encrypted_file"
    exit 1
  fi
}

# Run main function with all arguments
main "$@"
